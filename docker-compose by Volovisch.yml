version: '3.8'

services:
        neo4j:
            image: neo4j:latest
            container_name: LAB-neo4j
            restart: unless-stopped
            ports:
                    - "7474:7474"
                    - "7687:7687"
            volumes:
                    - neo4j:/data/db
            environment:
                    - HOST=neo4j
            networks:
                    - LAB

        redis:
                image: redis:alpine
                ports:
                    - "6379:6379"
                volumes:
                    - redis:/data/db
        elasticsearch:
                image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
                container_name: LAB-elasticsearch
                environment:
                      - discovery.type=single-node
                      - node.name=LAB-elasticsearch
                      - bootstrap.memory_lock=true
                      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
                ulimits:
                      memlock:
                        soft: -1
                        hard: -1
                volumes:
                        - elasticsearch:/usr/share/elasticsearch/data
                ports:
                      - 9200:9200
        mongo1:
                build:
                        context: ./mongodb/
                        dockerfile: Dockerfile
                container_name: mongo1
                stdin_open: true # docker run -i
                tty: true        # docker run -t
                networks:
                        - LAB

                ports:
                        - "30001:30001"
                environment:
                        MONGO_INITDB_DATABASE: LABS
                        MONGO_INITDB_ROOT_USERNAME: mongo
                        MONGO_INITDB_ROOT_PASSWORD: mongo
                volumes:
                        - ./data1:/data/db
                        - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
                healthcheck:
                        test: test $$(echo "rs.initiate({_id:'myReplica',members:[{_id:0,priority:3,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongosh admin -u mongo -p mongo --port 30001 --quiet) -eq 1
                        interval: 10s
                        start_period: 30s
                command: ["--replSet", "myReplica", "--bind_ip_all", "--keyFile","/mongodb.key","--port","30001"]
        mongo2:
                depends_on:
                        - mongo1
                build:
                        context: ./mongodb/
                        dockerfile: Dockerfile
                container_name: mongo2
                stdin_open: true # docker run -i
                tty: true        # docker run -t
                networks:
                        - LAB
                ports:
                        - "30002:30002"
                environment:
                        MONGO_INITDB_DATABASE: LABS
                        MONGO_INITDB_ROOT_USERNAME: mongo
                        MONGO_INITDB_ROOT_PASSWORD: mongo
                volumes:
                        - ./data2:/data/db
                        - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
                command: ["--replSet", "myReplica", "--bind_ip_all", "--keyFile","/mongodb.key","--port","30002"]
        mongo3:
                depends_on:
                        - mongo1
                build:
                        context: ./mongodb/
                        dockerfile: Dockerfile
                container_name: mongo3
                stdin_open: true # docker run -i
                tty: true        # docker run -t
                networks:
                        - LAB
                ports:
                        - "30003:30003"
                environment:
                         MONGO_INITDB_DATABASE: LABS
                         MONGO_INITDB_ROOT_USERNAME: mongo
                         MONGO_INITDB_ROOT_PASSWORD: mongo

                volumes:
                        - ./data3:/data/db
                        - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
                command: ["--replSet", "myReplica", "--bind_ip_all", "--keyFile","/mongodb.key","--port","30003"]

        postgres:
                image: postgres:14-alpine
                ports:
                        - "5432:5432"
                volumes:
                        - postgres:/var/lib/postgresql/data
                env_file:
                        - database.env
volumes:
        neo4j:
        redis:
        postgres:
        elasticsearch:

networks:
        LAB:
                driver: bridge
